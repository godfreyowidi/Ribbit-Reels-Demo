name: CI - Build, Migrate via Tests, and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: Password123!
          ACCEPT_EULA: Y
        ports:
          - 1433:1433
        options: >-
          --health-cmd "exit 0"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    env:
      GITHUB_ACTIONS: true
      ConnectionStrings__DefaultConnection: Server=sqlserver,1433;Database=RibbitReelsDb;User Id=sa;Password=Password123!;TrustServerCertificate=True
      Jwt__Key: ${{ secrets.JWT__KEY }}
      Jwt__Issuer: ${{ secrets.JWT__ISSUER }}
      Jwt__Audience: ${{ secrets.JWT__AUDIENCE }}
      Jwt__ExpireMinutes: ${{ secrets.JWT__EXPIREMINUTES }}
      GoogleAuth__ClientId: ${{ secrets.GOOGLEAUTH__CLIENTID }}
      GoogleAuth__ClientSecret: ${{ secrets.GOOGLEAUTH__CLIENTSECRET }}
      
    steps:
      - name: üõéÔ∏è Checkout code
        uses: actions/checkout@v3

      - name: üß∞ Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: üì¶ Restore NuGet dependencies
        run: dotnet restore

      - name: üõ†Ô∏è Build solution
        run: dotnet build --no-restore --configuration Release

      - name: üïí Wait for SQL Server to be ready
        run: |
          echo "‚è≥ Waiting for SQL Server to be ready..."
          for i in {1..30}; do
            /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P Password123! -Q "SELECT 1" && echo "‚úÖ SQL Server is ready!" && break
            echo "Attempt $i: SQL Server not ready yet..."
            sleep 5
          done

      - name: ‚úÖ Run Unit and Integration Tests (migrates DB internally)
        run: dotnet test --no-build --configuration Release
        env:
          DOTNET_ENVIRONMENT: Development
