name: CI - Build, Push to GHCR, and Deploy via Terraform

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      GITHUB_ACTIONS: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore NuGet dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Run Unit Tests
        run: dotnet test --no-build --configuration Release
        env:
          DOTNET_ENVIRONMENT: Development

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Set Docker image tag
        run: echo "IMAGE_TAG=ghcr.io/${{ github.repository_owner }}/ribbitreels-api:latest" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker build -t $IMAGE_TAG -f RibbitReels.Api/Dockerfile .

      - name: Push Docker image to GHCR
        run: docker push $IMAGE_TAG

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Login to Azure CLI
        run: |
          az login --service-principal \
            --username $AZURE_CLIENT_ID \
            --password $AZURE_CLIENT_SECRET \
            --tenant $AZURE_TENANT_ID
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Terraform Init
        working-directory: ./infra
        run: terraform init
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Terraform Apply
        working-directory: ./infra
        run: terraform apply -auto-approve
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_sql_admin_user: ${{ secrets.SQL_ADMIN_USER }}
          TF_VAR_sql_admin_password: ${{ secrets.SQL_ADMIN_PASSWORD }}
          TF_VAR_ghcr_owner: ${{ github.repository_owner }}
          TF_VAR_ghcr_token: ${{ secrets.GHCR_PAT }}
          TF_VAR_jwt_key: ${{ secrets.JWT__KEY }}
          TF_VAR_jwt_issuer: ${{ secrets.JWT__ISSUER }}
          TF_VAR_jwt_audience: ${{ secrets.JWT__AUDIENCE }}
          TF_VAR_jwt_expireminutes: "60"
          TF_VAR_google_clientid: ${{ secrets.GOOGLEAUTH__CLIENTID }}
          TF_VAR_google_clientsecret: ${{ secrets.GOOGLEAUTH__CLIENTSECRET }}

      - name: Get Terraform outputs
        id: tf
        working-directory: ./infra
        run: |
          echo "sql_server_fqdn=$(terraform output -raw sql_server_fqdn)" >> $GITHUB_ENV

      - name: Install sqlcmd
        run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/22.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18 mssql-tools18 unixodbc-dev
          echo "/opt/mssql-tools18/bin" >> $GITHUB_PATH

      - name: Wait for Azure SQL
        run: |
          for i in {1..30}; do
            sqlcmd -S tcp:${{ env.sql_server_fqdn }},1433 \
              -U ${{ secrets.SQL_ADMIN_USER }} \
              -P ${{ secrets.SQL_ADMIN_PASSWORD }} \
              -C -Q "SELECT 1" && break
            echo "SQL Server not ready yet, attempt $i..."
            sleep 10
          done

      - name: Run EF Core Migrations
        run: |
          cd RibbitReels.Api
          dotnet new tool-manifest || true
          dotnet tool install dotnet-ef --version 8.0.0
          dotnet tool run dotnet-ef database update \
            --project ../RibbitReels.Data \
            --startup-project .
        env:
          DOTNET_ENVIRONMENT: Production
          ConnectionStrings__DefaultConnection: "Server=${{ env.sql_server_fqdn }};Database=RibbitReelsDb;User Id=${{ secrets.SQL_ADMIN_USER }};Password=${{ secrets.SQL_ADMIN_PASSWORD }};TrustServerCertificate=True"
          Jwt__Key: ${{ secrets.JWT__KEY }}
          Jwt__Issuer: ${{ secrets.JWT__ISSUER }}
          Jwt__Audience: ${{ secrets.JWT__AUDIENCE }}
          Jwt__ExpireMinutes: "60"
          GoogleAuth__ClientId: ${{ secrets.GOOGLEAUTH__CLIENTID }}
          GoogleAuth__ClientSecret: ${{ secrets.GOOGLEAUTH__CLIENTSECRET }}
